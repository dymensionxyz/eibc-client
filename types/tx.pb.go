// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dymensionxyz/dymension/eibc/tx_auth.proto

package types

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgFulfillOrderAuthorized defines the FulfillOrderAuthorized request type.
type MsgFulfillOrderAuthorized struct {
	// order_id is the unique identifier of the order to be fulfilled.
	OrderId string `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	// rollapp_id is the unique identifier of the rollapp that the order is associated with.
	RollappId string `protobuf:"bytes,2,opt,name=rollapp_id,json=rollappId,proto3" json:"rollapp_id,omitempty"`
	// price is the price of the demand order
	Price github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=price,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"price"`
	// lp_address is the bech32-encoded address of the account which the authorization was granted from.
	// This account will receive the price amount at the finalization phase.
	LpAddress string `protobuf:"bytes,4,opt,name=lp_address,json=lpAddress,proto3" json:"lp_address,omitempty"`
	// operator_fee_address is an optional bech32-encoded address of an account that would collect the operator_fee_part
	// if it's empty, the operator_fee_part will go to the operator_address
	OperatorFeeAddress string `protobuf:"bytes,5,opt,name=operator_fee_address,json=operatorFeeAddress,proto3" json:"operator_fee_address,omitempty"`
	// expected_fee is the nominal fee set in the order.
	ExpectedFee string `protobuf:"bytes,6,opt,name=expected_fee,json=expectedFee,proto3" json:"expected_fee,omitempty"`
	// operator_fee_share is the share of the fee earnings that goes to the operator
	// it will be deduced from the fee of the demand order and paid out immediately
	OperatorFeeShare types.DecProto `protobuf:"bytes,7,opt,name=operator_fee_share,json=operatorFeeShare,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.DecProto" json:"operator_fee_share"`
	// settlement_validated signals if the block behind the demand order needs to be "settlement validated" or not
	SettlementValidated bool `protobuf:"varint,8,opt,name=settlement_validated,json=settlementValidated,proto3" json:"settlement_validated,omitempty"`
}

func (m *MsgFulfillOrderAuthorized) Reset()         { *m = MsgFulfillOrderAuthorized{} }
func (m *MsgFulfillOrderAuthorized) String() string { return proto.CompactTextString(m) }
func (*MsgFulfillOrderAuthorized) ProtoMessage()    {}
func (*MsgFulfillOrderAuthorized) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7e8da19b02f0731, []int{0}
}
func (m *MsgFulfillOrderAuthorized) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgFulfillOrderAuthorized) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgFulfillOrderAuthorized.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgFulfillOrderAuthorized) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgFulfillOrderAuthorized.Merge(m, src)
}
func (m *MsgFulfillOrderAuthorized) XXX_Size() int {
	return m.Size()
}
func (m *MsgFulfillOrderAuthorized) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgFulfillOrderAuthorized.DiscardUnknown(m)
}

var xxx_messageInfo_MsgFulfillOrderAuthorized proto.InternalMessageInfo

func (m *MsgFulfillOrderAuthorized) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

func (m *MsgFulfillOrderAuthorized) GetRollappId() string {
	if m != nil {
		return m.RollappId
	}
	return ""
}

func (m *MsgFulfillOrderAuthorized) GetPrice() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Price
	}
	return nil
}

func (m *MsgFulfillOrderAuthorized) GetLpAddress() string {
	if m != nil {
		return m.LpAddress
	}
	return ""
}

func (m *MsgFulfillOrderAuthorized) GetOperatorFeeAddress() string {
	if m != nil {
		return m.OperatorFeeAddress
	}
	return ""
}

func (m *MsgFulfillOrderAuthorized) GetExpectedFee() string {
	if m != nil {
		return m.ExpectedFee
	}
	return ""
}

func (m *MsgFulfillOrderAuthorized) GetOperatorFeeShare() types.DecProto {
	if m != nil {
		return m.OperatorFeeShare
	}
	return types.DecProto{}
}

func (m *MsgFulfillOrderAuthorized) GetSettlementValidated() bool {
	if m != nil {
		return m.SettlementValidated
	}
	return false
}

func init() {
	proto.RegisterType((*MsgFulfillOrderAuthorized)(nil), "dymensionxyz.dymension.eibc.MsgFulfillOrderAuthorized")
}

func init() {
	proto.RegisterFile("dymensionxyz/dymension/eibc/tx_auth.proto", fileDescriptor_d7e8da19b02f0731)
}

var fileDescriptor_d7e8da19b02f0731 = []byte{
	// 468 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0xcf, 0x6e, 0xd3, 0x30,
	0x18, 0x6f, 0x28, 0xdb, 0x3a, 0x17, 0x09, 0x14, 0x2a, 0x91, 0x0e, 0x2d, 0x2b, 0x9c, 0x02, 0x88,
	0x78, 0x59, 0x6f, 0xdc, 0x56, 0x50, 0xa5, 0x09, 0x21, 0x50, 0x91, 0x38, 0x70, 0x89, 0x9c, 0xf8,
	0x5b, 0x6a, 0x91, 0xc4, 0x96, 0xed, 0x56, 0xed, 0x4e, 0x88, 0x27, 0xe0, 0x39, 0x38, 0xf1, 0x18,
	0x3b, 0xee, 0xc8, 0x09, 0x50, 0x7b, 0xe0, 0x01, 0x78, 0x01, 0xe4, 0xc4, 0x29, 0x45, 0x02, 0x89,
	0x93, 0xf3, 0xfb, 0xe7, 0xfc, 0x3e, 0xeb, 0x43, 0x0f, 0xe8, 0xb2, 0x80, 0x52, 0x31, 0x5e, 0x2e,
	0x96, 0x17, 0x78, 0x03, 0x30, 0xb0, 0x24, 0xc5, 0x7a, 0x11, 0x93, 0x99, 0x9e, 0x86, 0x42, 0x72,
	0xcd, 0xdd, 0xbb, 0xdb, 0xd6, 0x70, 0x03, 0x42, 0x63, 0x3d, 0xb8, 0x93, 0x72, 0x55, 0x70, 0x85,
	0x0b, 0x95, 0xe1, 0x79, 0x64, 0x8e, 0x3a, 0x75, 0xd0, 0xaf, 0x85, 0xb8, 0x42, 0xb8, 0x06, 0x56,
	0xea, 0x65, 0x3c, 0xe3, 0x35, 0x6f, 0xbe, 0x2c, 0xeb, 0xdb, 0x9b, 0x12, 0xa2, 0x00, 0xcf, 0xa3,
	0x04, 0x34, 0x89, 0x70, 0xca, 0x59, 0x59, 0xeb, 0xf7, 0x7f, 0xb6, 0x51, 0xff, 0x85, 0xca, 0xc6,
	0xb3, 0xfc, 0x9c, 0xe5, 0xf9, 0x4b, 0x49, 0x41, 0x9e, 0xce, 0xf4, 0x94, 0x4b, 0x76, 0x01, 0xd4,
	0xed, 0xa3, 0x0e, 0x37, 0x54, 0xcc, 0xa8, 0xe7, 0x0c, 0x9c, 0x60, 0x7f, 0xb2, 0x57, 0xe1, 0x33,
	0xea, 0x1e, 0x22, 0x24, 0x79, 0x9e, 0x13, 0x21, 0x8c, 0x78, 0xad, 0x12, 0xf7, 0x2d, 0x73, 0x46,
	0x5d, 0x82, 0x76, 0x84, 0x64, 0x29, 0x78, 0xed, 0x41, 0x3b, 0xe8, 0x9e, 0xf4, 0x43, 0xdb, 0xd5,
	0xf4, 0x08, 0x6d, 0x8f, 0xf0, 0x29, 0x67, 0xe5, 0xe8, 0xf8, 0xf2, 0xeb, 0x51, 0xeb, 0xd3, 0xb7,
	0xa3, 0x20, 0x63, 0x7a, 0x3a, 0x4b, 0xc2, 0x94, 0x17, 0x76, 0x30, 0x7b, 0x3c, 0x56, 0xf4, 0x1d,
	0xd6, 0x4b, 0x01, 0xaa, 0x0a, 0xa8, 0x49, 0x7d, 0xb3, 0x69, 0x90, 0x8b, 0x98, 0x50, 0x2a, 0x41,
	0x29, 0xef, 0x7a, 0xdd, 0x20, 0x17, 0xa7, 0x35, 0xe1, 0x1e, 0xa3, 0x1e, 0x17, 0x20, 0x89, 0xe6,
	0x32, 0x3e, 0x07, 0xd8, 0x18, 0x77, 0x2a, 0xa3, 0xdb, 0x68, 0x63, 0x80, 0x26, 0x71, 0x0f, 0xdd,
	0x80, 0x85, 0x80, 0x54, 0x03, 0x35, 0x09, 0x6f, 0xb7, 0x72, 0x76, 0x1b, 0x6e, 0x0c, 0xe0, 0xbe,
	0x77, 0x90, 0xfb, 0xc7, 0xad, 0x6a, 0x4a, 0x24, 0x78, 0x7b, 0x03, 0x27, 0xe8, 0x9e, 0x1c, 0xfe,
	0x75, 0xc8, 0x67, 0x90, 0xbe, 0x32, 0x4f, 0x3d, 0x1a, 0xda, 0x41, 0x1f, 0xfd, 0xc7, 0xa0, 0x4d,
	0x68, 0x72, 0x6b, 0xab, 0xe7, 0x6b, 0xf3, 0x2f, 0x37, 0x42, 0x3d, 0x05, 0x5a, 0xe7, 0x50, 0x40,
	0xa9, 0xe3, 0x39, 0xc9, 0x19, 0x25, 0x1a, 0xa8, 0xd7, 0x19, 0x38, 0x41, 0x67, 0x72, 0xfb, 0xb7,
	0xf6, 0xa6, 0x91, 0x9e, 0xdc, 0xfc, 0xf0, 0xe3, 0xf3, 0xc3, 0xad, 0xc7, 0x1a, 0x3d, 0xbf, 0x5c,
	0xf9, 0xce, 0xd5, 0xca, 0x77, 0xbe, 0xaf, 0x7c, 0xe7, 0xe3, 0xda, 0x6f, 0x5d, 0xad, 0xfd, 0xd6,
	0x97, 0xb5, 0xdf, 0x7a, 0x1b, 0x6d, 0x95, 0xfb, 0xc7, 0x32, 0xcf, 0x87, 0x78, 0x61, 0x37, 0xda,
	0x74, 0x4d, 0x76, 0xab, 0x4d, 0x1a, 0xfe, 0x0a, 0x00, 0x00, 0xff, 0xff, 0xf1, 0x5a, 0xae, 0x40,
	0xfd, 0x02, 0x00, 0x00,
}

func (m *MsgFulfillOrderAuthorized) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFulfillOrderAuthorized) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFulfillOrderAuthorized) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SettlementValidated {
		i--
		if m.SettlementValidated {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	{
		size, err := m.OperatorFeeShare.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	if len(m.ExpectedFee) > 0 {
		i -= len(m.ExpectedFee)
		copy(dAtA[i:], m.ExpectedFee)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ExpectedFee)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.OperatorFeeAddress) > 0 {
		i -= len(m.OperatorFeeAddress)
		copy(dAtA[i:], m.OperatorFeeAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OperatorFeeAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.LpAddress) > 0 {
		i -= len(m.LpAddress)
		copy(dAtA[i:], m.LpAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.LpAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Price) > 0 {
		for iNdEx := len(m.Price) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Price[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.RollappId) > 0 {
		i -= len(m.RollappId)
		copy(dAtA[i:], m.RollappId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RollappId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OrderId) > 0 {
		i -= len(m.OrderId)
		copy(dAtA[i:], m.OrderId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OrderId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

func (m *MsgFulfillOrderAuthorized) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrderId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.RollappId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Price) > 0 {
		for _, e := range m.Price {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.LpAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.OperatorFeeAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ExpectedFee)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.OperatorFeeShare.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.SettlementValidated {
		n += 2
	}
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}

func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}

func (m *MsgFulfillOrderAuthorized) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFulfillOrderAuthorized: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFulfillOrderAuthorized: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RollappId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RollappId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Price = append(m.Price, types.Coin{})
			if err := m.Price[len(m.Price)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LpAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LpAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorFeeAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorFeeAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpectedFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpectedFee = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorFeeShare", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OperatorFeeShare.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettlementValidated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SettlementValidated = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
